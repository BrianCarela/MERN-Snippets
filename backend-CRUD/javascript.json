{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"MERN-index-imports": {
		"prefix": "server-imp",
		"body": [
			"const express = require('express');",
			"const app = express();",
			"const path = require('path');",
			"const logger = require('morgan')",
			"const connectToMongoDB = require('./db/mongodb');",
			"require('dotenv').config();"
		],
		"description": "Make some basic imports for your backend server in the MERN stack"
	},
	"MERN-index-middleware": {
        "prefix": "server-mid",
        "body": [
            "// Set view engine to EJS",
            "app.set('view engine', 'ejs');",
            "// Set view engine to look at the 'views' folder",
			"app.set('views', path.join(__dirname, 'views'));",
			"// Use the 'public' folder to read static files such as CSS",
			"app.use(express.static(path.join(__dirname, 'public')));",
			"// Read incoming requests properly",
			"app.use(express.urlencoded({ extended: false }));",
			"app.use(express.json());",
			"// logs requests to the server",
			"app.use(logger('dev'))"
        ],
        "description": "Necessary middleware"
    },
	"MERN-index-power": {
        "prefix": "server-pow",
        "body": [
            "const PORT = process.env.PORT",
            "",
            "app.listen(PORT, () => {",
			"    console.log(`server listening on port $${PORT}`);",
			"",
			"    connectToMongoDB();",
			"});"
        ],
        "description": "this lets us turn the server on"
    },
	"MERN-db-mongo": {
		"prefix": "connect-mongo",
		"body": [
			"const mongoose = require('mongoose');",
			"require('dotenv').config()",
			"",
			"function connectToMongoDB(){",
			"    mongoose.connect(process.env.MONGODB_URI)",
			"        .then(() => {",
			"            console.log('MONGODB CONNECTED')",
			"        })",
			"        .catch((e) => {",
			"            console.log(e)",
			"        });",
			"};",
			"",
			"module.exports = connectToMongoDB;"
		],
		"description": "Create the entire db/mongodb.js file. There is nothing to customize here"
	},
	"test-snip": {
        "prefix": "testing-snippet",
        "body": [
            "console.log(`${1:model}`)",
			"console.log(`${1:model}`)"
        ],
        "description": "testing for cursor positions and labels/placeholders"
    },
	"MERN-model-schema": {
        "prefix": "model-schema",
        "body": [
            "const mongoose = require('mongoose');",
            "",
            "const ${1:model}Schema = new mongoose.Schema(",
			"    {",
			"        ${2:property}: {",
			"            type: String,",
			"            unique: true,",
			"            required: true",
			"        },",
			"    }",
			")",
			"",
			"const ${1:model} = mongoose.model('${1:model}', ${1:model}Schema);",
			"",
			"module.exports = ${1:model};"
        ],
        "description": "Creates an example Model/Schema file, replace the words 'model' with the name of your data collection"
    },
	"MERN-router": {
        "prefix": "router-template",
        "body": [
            "const router = require('express').Router();",
			"",
			"const {",
			"    getAll${1:model},",
			"    getOne${1:model},",
			"    createOne${1:model},",
			"    deleteOne${1:model},",
			"    updateOne${1:model}",
			"} = require('../controllers/${1:model}Controller');",
			"",
			"// localhost:3001/${1:model}/all${1:model}",
			"router.get('/all${1:model}', getAll${1:model});",
			"",
			"// localhost:3001/${1:model}/one${1:model}/:${2:params}",
			"router.get('/one${1:model}/:${2:params}', getOne${1:model});",
			"",
			"// localhost:3001/${1:model}/createOne${1:model}",
			"router.post('/createOne${1:model}', createOne${1:model});",
			"",
			"// localhost:3001/${1:model}/deleteOne${1:model}/:${2:params}",
			"router.delete('/deleteOne${1:model}/:${2:params}', deleteOne${1:model});",
			"",
			"// localhost:3001/${1:model}/updateOne${1:model}/:${2:params}",
			"router.put('/updateOne${1:model}/:${2:params}', updateOne${1:model});",
			"",
			"module.exports = router;",
        ],
        "description": "insert-description-here"
    },
	"MERN-controller": {
        "prefix": "controller-template",
        "body": [
            "const ${1:collectionName} = require('../models/${1:collectionName}Model');",
			"",
			"async function getAll${1:collectionName} (req, res) {",
			"    try {",
			"        let results = await ${1:collectionName}.find({});",
			"",
			"        res.json({",
			"            message: 'success',",
			"            payload: results",
			"        })",
			"    } catch (error) {",
			"        let errorObj = {",
			"            message: 'get all ${1:collectionName} failure',",
			"            payload: error",
			"        }",
			"",
			"        console.log(errorObj)",
			"",
			"        res.json(errorObj)",
			"    }",
			"}",
			"",
			"async function getOne${1:collectionName} (req, res) {",
			"    try {",
			"        let result = await ${1:collectionName}.findOne({${2:propertyName}: req.params.${2:propertyName}});",
			"",
			"        res.json({",
			"            message: 'success',",
			"            payload: result",
			"        })",
			"    } catch (error) {",
			"        let errorObj = {",
			"            message: 'get ONE ${1:collectionName} failure',",
			"            payload: error",
			"        }",
			"",
			"        console.log(errorObj)",
			"",
			"        res.json(errorObj)",
			"    }",
			"}",
			"",
			"async function createOne${1:collectionName}(req, res){",
			"    try {",
			"        // Accepting the front-end form data from the client to generate the document",
			"        let new${1:collectionName} = {",
			"            ${2:propertyName}: req.body.${2:propertyName},",
			"        }",
			"",
			"        // post the new document to the ${1:collectionName} collection",
			"        await ${1:collectionName}.create(new${1:collectionName});",
			"",
			"        res.json({",
			"            message: 'success',",
			"            payload: new${1:collectionName}",
			"        });",
			"    } catch (error) {",
			"        let errorObj = {",
			"            message: 'create one ${1:collectionName} failure',",
			"            payload: error",
			"        }",
			"",
			"        console.log(errorObj);",
			"",
			"        res.json(errorObj);",
			"    }",
			"}",
			"",
			"async function deleteOne${1:collectionName}(req, res) {",
			"    try {",
			"        await ${1:collectionName}.deleteOne({ ${2:propertyName}: req.params.${2:propertyName} });",
			"",
			"        res.json({",
			"            message: 'success',",
			"            payload: req.params.${2:propertyName}",
			"        })",
			"    } catch (error) {",
			"        let errorObj = {",
			"            message: 'delete one ${1:collectionName} failure',",
			"            payload: error",
			"        }",
			"",
			"        console.log(errorObj);",
			"",
			"        res.json(errorObj);",
			"    }",
			"}",
			"",
			"async function updateOne${1:collectionName}(req, res){",
			"    try {",
			"        let target${1:collectionName} = await ${1:collectionName}.findOne({ ${2:propertyName}: req.params.${2:propertyName} })",
			"",
			"        // ternaries avoid inputting undefined values",
			"        let updated${1:collectionName} = {",
			"            ${2:propertyName}: req.body.${2:propertyName} ? req.body.${2:propertyName} : target${1:collectionName}.${2:propertyName},",
			"        }",
			"",
			"        await ${1:collectionName}.updateOne(",
			"            { ${2:propertyName}: req.params.${2:propertyName} },",
			"            { $$set: updated${1:collectionName} },",
			"            { upsert: true }",
			"        )",
			"",
			"        res.json({",
			"            message: 'success',",
			"            payload: updated${1:collectionName}",
			"        });",
			"    } catch (error) {",
			"        let errorObj = {",
			"            message: 'update one ${1:collectionName} failure',",
			"            payload: error",
			"        }",
			"",
			"        console.log(errorObj);",
			"",
			"        res.json(errorObj);",
			"    }",
			"}",
			"",
			"module.exports = {",
			"    getAll${1:collectionName},",
			"    getOne${1:collectionName},",
			"    createOne${1:collectionName}, ",
			"    deleteOne${1:collectionName},",
			"    updateOne${1:collectionName}",
			"}",
        ],
        "description": "Replace 'collectionName' with the name of the data collection that is being controlled. Replace 'propertyName' with the different properties from the data that can be used to find/update/delete from the database. Make sure to look carefully at the create/update functions, as generating a new document depends on the original Model"
    },
	"MERN-index-routes": {
        "prefix": "server-routes",
        "body": [
            "const ${1:collectionName}Router = require('./routes/${1:collectionName}Router');",
			"// localhost:3001/...",
			"app.use('/${1:collectionName}', ${1:collectionName}Router);"
        ],
        "description": "insert-description-here"
    }
}
